{"version":3,"sources":["store/actions/employeeAction.js","views/employee/LinearStepper.js","views/employee/addEmployee.js"],"names":["axios","defaults","withCredentials","addEmployee","userData","dispatch","a","type","ADD_EMPLOYEE_REQUEST","config","headers","console","log","y","personalDetails","fullName","fatherName","mobileNo","gender","dob","date","currentAddress","permanentAddress","companyDetails","UAN","uanNumber","aadhaarNo","aadhaarNumber","panNo","panNumber","drivingLicense","drivingLicenses","designation","joiningDate","selectWages","sickLeave","casualLeave","salaryDetails","dailyWages","basicSalary","hra","con","medical","education","canteen","incomeTax","bankDetails","bankName","ifscCode","bankIfsc","accountNo","PFNominee","pfNominee","gratuityNominee","leaveNominee","post","data","ADD_EMPLOYEE_SUCCESS","payload","user","ADD_EMPLOYEE_FAIL","myEmployee","page","MY_EMPLOYEE_REQUEST","get","MY_EMPLOYEE_SUCCESS","MY_EMPLOYEE_FAIL","response","addRoles","ADD_ROLES_REQUEST","ADD_ROLES_SUCCESS","ADD_ROLES_FAIL","clearErrors","CLEAR_ERRORS","ColorButton","styled","Button","theme","marginTop","color","fontFamily","fontSize","width","borderRadius","backgroundColor","UploadButton","boxShadow","fontWeight","BackButton","border","useStyles","makeStyles","button","marginRight","spacing","BasicDetails","React","useState","setGender","handleChange","event","target","value","useFormContext","control","errors","formState","Grid","container","alignItems","justifyContent","style","item","xs","sm","name","rules","required","render","field","TextField","id","label","variant","placeholder","fullWidth","margin","error","Boolean","helperText","message","inputProps","maxLength","FormControl","InputLabel","Select","labelId","onChange","MenuItem","InputLabelProps","shrink","CompanyDetails","setDesignation","setSelectWages","SalaryDetails","BankDetails","confirmAccount","getStepContent","step","LinaerStepper","useDispatch","classes","methods","useForm","defaultValues","selectFile","setselectFile","activeStep","setActiveStep","skippedSteps","setSkippedSteps","steps","Stepper","alternativeLabel","map","index","labelProps","Object","keys","length","Step","key","StepLabel","Typography","align","onSubmit","handleSubmit","getValues","fetch","then","json","res","filter","skipItem","x","parseInt","setValue","Math","round","toString","className","disabled","onClick","autoComplete","files","cursor","csvData","FormData","append","catch","err","AddEmployee","Container","component","Box","p","LinearStepper"],"mappings":"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","file":"static/js/18.a08c53d2.chunk.js","sourcesContent":["import axios from 'axios';\nimport {\n    MY_EMPLOYEE_FAIL,\n    MY_EMPLOYEE_REQUEST,\n    MY_EMPLOYEE_SUCCESS,\n    ADD_EMPLOYEE_FAIL,\n    ADD_EMPLOYEE_REQUEST,\n    ADD_EMPLOYEE_SUCCESS,\n    ADD_ROLES_FAIL,\n    ADD_ROLES_REQUEST,\n    ADD_ROLES_SUCCESS,\n    ADD_ROLES_RESET,\n    CLEAR_ERRORS\n} from 'store/constant/employeeConstant';\n\naxios.defaults.withCredentials = true;\n// Add Employee\nexport const addEmployee = (userData) => async (dispatch) => {\n    try {\n        dispatch({ type: ADD_EMPLOYEE_REQUEST });\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                withCredentials: true\n            }\n        };\n        console.log(userData);\n        const y = {\n            personalDetails: {\n                fullName: userData.fullName,\n                fatherName: userData.fatherName,\n                mobileNo: userData.mobileNo,\n                gender: userData.gender,\n                dob: userData.date,\n                currentAddress: userData.currentAddress,\n                permanentAddress: userData.permanentAddress\n            },\n            companyDetails: {\n                UAN: userData.uanNumber,\n                aadhaarNo: userData.aadhaarNumber,\n                panNo: userData.panNumber,\n                drivingLicense: userData.drivingLicenses,\n                designation: userData.designation,\n                joiningDate: userData.joiningDate,\n                selectWages: userData.selectWages,\n                sickLeave: userData.sickLeave,\n                casualLeave: userData.casualLeave\n            },\n            salaryDetails: {\n                dailyWages: userData.dailyWages,\n                basicSalary: userData.basicSalary,\n                hra: userData.hra,\n                con: userData.con,\n                medical: userData.medical,\n                education: userData.education,\n                canteen: userData.canteen,\n                incomeTax: userData.incomeTax\n            },\n            bankDetails: {\n                bankName: userData.bankName,\n                ifscCode: userData.bankIfsc,\n                accountNo: userData.accountNo,\n                PFNominee: userData.pfNominee,\n                gratuityNominee: userData.gratuityNominee,\n                leaveNominee: userData.leaveNominee\n            }\n        };\n        const { data } = await axios.post('/api/v1/employees/new', y, config);\n\n        dispatch({\n            type: ADD_EMPLOYEE_SUCCESS,\n            payload: data.user\n        });\n        dispatch({ type: ADD_EMPLOYEE_REQUEST });\n    } catch (error) {\n        dispatch({\n            type: ADD_EMPLOYEE_FAIL,\n            payload: error\n        });\n    }\n};\n\n// Get currently logged in user employee list\nexport const myEmployee = (page) => async (dispatch) => {\n    try {\n        dispatch({ type: MY_EMPLOYEE_REQUEST });\n\n        const { data } = await axios.get(`/api/v1/employees/mylist?page=${page}`, {\n            withCredentials: true\n        });\n        console.log(data);\n        dispatch({\n            type: MY_EMPLOYEE_SUCCESS,\n            payload: data\n        });\n    } catch (error) {\n        dispatch({\n            type: MY_EMPLOYEE_FAIL,\n            payload: error.response\n        });\n    }\n};\n// Add Roles\nexport const addRoles = (userData) => async (dispatch) => {\n    try {\n        dispatch({ type: ADD_ROLES_REQUEST });\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                withCredentials: true\n            }\n        };\n\n        const { data } = await axios.post('/api/v1/admin/register', userData, config);\n        dispatch({\n            type: ADD_ROLES_SUCCESS,\n            payload: data\n        });\n        dispatch({ type: ADD_ROLES_REQUEST });\n    } catch (error) {\n        dispatch({\n            type: ADD_ROLES_FAIL,\n            payload: error\n        });\n    }\n};\n\n// Clear Errors\nexport const clearErrors = () => async (dispatch) => {\n    dispatch({\n        type: CLEAR_ERRORS\n    });\n};\n","import React, { useState } from 'react';\nimport Grid from '@mui/material/Grid';\nimport { Typography, TextField, Button, Stepper, Step, StepLabel } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport { useForm, Controller, FormProvider, useFormContext } from 'react-hook-form';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\nimport FormControl from '@mui/material/FormControl';\nimport { styled } from '@mui/material/styles';\nimport { useDispatch } from 'react-redux';\nimport { addEmployee } from 'store/actions/employeeAction';\nimport axios from 'axios';\n\nconst ColorButton = styled(Button)(({ theme }) => ({\n    marginTop: '20px',\n    color: 'white',\n    fontFamily: 'Poppins',\n    fontSize: '22px',\n    width: '100%',\n    borderRadius: '5px',\n    backgroundColor: '#009FBE'\n}));\nconst UploadButton = styled(Button)(({ theme }) => ({\n    color: 'black',\n    fontFamily: 'Poppins',\n    fontSize: '22px',\n    width: '100%',\n    borderRadius: '5px',\n    backgroundColor: '#dcdcdc',\n    boxShadow: 'none',\n    fontWeight: 400\n}));\nconst BackButton = styled(Button)(({ theme }) => ({\n    marginTop: '20px',\n    color: 'grey',\n    fontFamily: 'Poppins',\n    fontSize: '22px',\n    width: '100%',\n    borderRadius: '5px',\n    border: '1px solid #009FBE'\n}));\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        marginRight: theme.spacing(1)\n    }\n}));\n\nfunction getSteps() {\n    return ['Basic Details', 'Personal Details', 'Salary Details', 'Bank Details'];\n}\nconst BasicDetails = () => {\n    const [gender, setGender] = React.useState('');\n\n    const handleChange = (event) => {\n        setGender(event.target.value);\n    };\n    const {\n        control,\n        formState: { errors }\n    } = useFormContext();\n    console.log(errors);\n    return (\n        <>\n            <Grid container spacing={6} alignItems=\"center\" justifyContent=\"center\" style={{ marginTop: '5px' }}>\n                <Grid item xs={12} sm={10}>\n                    <Controller\n                        control={control}\n                        name=\"fullName\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"full-name\"\n                                label=\"Full Name\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter Full Name\"\n                                fullWidth\n                                margin=\"normal\"\n                                {...field}\n                                error={Boolean(errors?.fullName)}\n                                helperText={errors.fullName?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n            </Grid>\n            <Grid container spacing={6} alignItems=\"center\" justifyContent=\"center\">\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"fatherName\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"father-name\"\n                                label=\"Father Name\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter Father Name\"\n                                fullWidth\n                                margin=\"normal\"\n                                {...field}\n                                error={Boolean(errors?.fatherName)}\n                                helperText={errors.fatherName?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"mobileNo\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"mobile-no\"\n                                label=\"Mobile Number\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter 10 Digit Mobile Number\"\n                                fullWidth\n                                margin=\"normal\"\n                                inputProps={{ maxLength: 10 }}\n                                {...field}\n                                error={Boolean(errors?.mobileNo)}\n                                helperText={errors.mobileNo?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n            </Grid>\n            <Grid container spacing={6} alignItems=\"center\" justifyContent=\"center\">\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"gender\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <FormControl fullWidth>\n                                <InputLabel id=\"gender-label\">Gender</InputLabel>\n                                <Select\n                                    labelId=\"gender-label\"\n                                    id=\"gender-select\"\n                                    value={gender}\n                                    label=\"Gender\"\n                                    onChange={handleChange}\n                                    {...field}\n                                    error={Boolean(errors?.gender)}\n                                    helperText={errors.gender?.message}\n                                >\n                                    <MenuItem value=\"Male\">Male</MenuItem>\n                                    <MenuItem value=\"Female\">Female</MenuItem>\n                                </Select>\n                            </FormControl>\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"date\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"date\"\n                                label=\"Birthday\"\n                                type=\"date\"\n                                fullWidth\n                                margin=\"normal\"\n                                InputLabelProps={{ shrink: true }}\n                                {...field}\n                                error={Boolean(errors?.date)}\n                                helperText={errors.date?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n            </Grid>\n            <Grid container spacing={6} alignItems=\"center\" justifyContent=\"center\">\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"currentAddress\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"current-address\"\n                                label=\"Current Address\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter Current Address\"\n                                fullWidth\n                                margin=\"normal\"\n                                {...field}\n                                error={Boolean(errors?.currentAddress)}\n                                helperText={errors.currentAddress?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"permanentAddress\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"permanent-address\"\n                                label=\"Permanent Address\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter Permanent Address\"\n                                fullWidth\n                                margin=\"normal\"\n                                {...field}\n                                error={Boolean(errors?.permanentAddress)}\n                                helperText={errors.permanentAddress?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\nconst CompanyDetails = () => {\n    const {\n        control,\n        formState: { errors }\n    } = useFormContext();\n    console.log(errors);\n    const [designation, setDesignation] = React.useState('');\n    const [selectWages, setSelectWages] = React.useState('');\n    const handleChange = (event) => {\n        setDesignation(event.target.value);\n        setSelectWages(event.target.value);\n    };\n    return (\n        <>\n            <Grid container spacing={6} alignItems=\"center\" justifyContent=\"center\" style={{ marginTop: '5px' }}>\n                <Grid item xs={12} sm={10}>\n                    <Controller\n                        control={control}\n                        name=\"uanNumber\"\n                        render={({ field }) => (\n                            <TextField\n                                id=\"uan\"\n                                label=\"UAN Number\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter 12 Digit UAN Number\"\n                                fullWidth\n                                margin=\"normal\"\n                                inputProps={{ maxLength: 12 }}\n                                {...field}\n                            />\n                        )}\n                    />\n                </Grid>\n            </Grid>\n            <Grid container spacing={6} alignItems=\"center\" justifyContent=\"center\">\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"aadhaarNumber\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"aadhaar-number\"\n                                label=\"Aadhaar Number\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter 12 Digit Aadhaar Number\"\n                                fullWidth\n                                margin=\"normal\"\n                                inputProps={{ maxLength: 12 }}\n                                {...field}\n                                error={Boolean(errors?.aadhaarNumber)}\n                                helperText={errors.aadhaarNumber?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"panNumber\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"pan-number\"\n                                label=\"Pan Number\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter 10 Digit Pan Number\"\n                                fullWidth\n                                margin=\"normal\"\n                                inputProps={{ maxLength: 10 }}\n                                {...field}\n                                error={Boolean(errors?.panNumber)}\n                                helperText={errors.panNumber?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n            </Grid>\n            <Grid container spacing={6} alignItems=\"center\" justifyContent=\"center\">\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"drivingLicenses\"\n                        render={({ field }) => (\n                            <TextField\n                                id=\"driving-licenses\"\n                                label=\"Driving Licenses\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter Driving Licenses Number\"\n                                fullWidth\n                                margin=\"normal\"\n                                {...field}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"designation\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <FormControl fullWidth>\n                                <InputLabel id=\"demo-simple-select-label\">Designation</InputLabel>\n                                <Select\n                                    labelId=\"demo-simple-select-label\"\n                                    id=\"demo-simple-select\"\n                                    value={designation}\n                                    label=\"Designation\"\n                                    onChange={handleChange}\n                                    {...field}\n                                    error={Boolean(errors?.designation)}\n                                    helperText={errors.designation?.message}\n                                >\n                                    <MenuItem value=\"Skilled\">Skilled</MenuItem>\n                                    <MenuItem value=\"Semi Skilled\">Semi Skilled</MenuItem>\n                                    <MenuItem value=\"Un Skilled\">Un Skilled</MenuItem>\n                                    <MenuItem value=\"Others\">Others</MenuItem>\n                                </Select>\n                            </FormControl>\n                        )}\n                    />\n                </Grid>\n            </Grid>\n            <Grid container spacing={6} alignItems=\"center\" justifyContent=\"center\">\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"joiningDate\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"joining-date\"\n                                label=\"Joining Date\"\n                                type=\"date\"\n                                fullWidth\n                                margin=\"normal\"\n                                InputLabelProps={{ shrink: true }}\n                                {...field}\n                                error={Boolean(errors?.joiningDate)}\n                                helperText={errors.joiningDate?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"selectWages\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <FormControl fullWidth>\n                                <InputLabel id=\"demo-simple-select-label\">Mode of Wages</InputLabel>\n                                <Select\n                                    labelId=\"demo-simple-select-label\"\n                                    id=\"demo-simple-select\"\n                                    value={selectWages}\n                                    label=\"Select Wages\"\n                                    onChange={handleChange}\n                                    {...field}\n                                    error={Boolean(errors?.selectWages)}\n                                    helperText={errors.selectWages?.message}\n                                >\n                                    <MenuItem value=\"Daily Wages\">Daily Wages</MenuItem>\n                                    <MenuItem value=\"Monthly Wages\">Monthly Wages</MenuItem>\n                                </Select>\n                            </FormControl>\n                        )}\n                    />\n                </Grid>\n            </Grid>\n            <Grid container spacing={6} alignItems=\"center\" justifyContent=\"center\">\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"sickLeave\"\n                        render={({ field }) => (\n                            <TextField\n                                id=\"sick-leave\"\n                                label=\"Sick Leave\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter Sick Leave\"\n                                fullWidth\n                                margin=\"normal\"\n                                {...field}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"casualLeave\"\n                        render={({ field }) => (\n                            <TextField\n                                id=\"casual-leave\"\n                                label=\"Casual Leave\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter Casual Leave\"\n                                fullWidth\n                                margin=\"normal\"\n                                {...field}\n                            />\n                        )}\n                    />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\nconst SalaryDetails = () => {\n    const {\n        control,\n        formState: { errors }\n    } = useFormContext();\n    console.log(errors);\n    return (\n        <>\n            <Grid container spacing={6} alignItems=\"center\" justifyContent=\"center\" style={{ marginTop: '5px' }}>\n                <Grid item xs={12} sm={10}>\n                    <Controller\n                        control={control}\n                        name=\"basicSalary\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"basic-salary\"\n                                label=\"Basic Salary\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter Basic Salary\"\n                                fullWidth\n                                margin=\"normal\"\n                                {...field}\n                                error={Boolean(errors?.basicSalary)}\n                                helperText={errors.basicSalary?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n            </Grid>\n            <Grid container spacing={6} alignItems=\"center\" justifyContent=\"center\">\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"hra\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"hra\"\n                                label=\"HRA\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter Employee HRA\"\n                                fullWidth\n                                margin=\"normal\"\n                                {...field}\n                                error={Boolean(errors?.hra)}\n                                helperText={errors.hra?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"con\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"con\"\n                                label=\"Con\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter Employee Con\"\n                                fullWidth\n                                margin=\"normal\"\n                                {...field}\n                                error={Boolean(errors?.con)}\n                                helperText={errors.con?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n            </Grid>\n            <Grid container spacing={6} alignItems=\"center\" justifyContent=\"center\">\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"medical\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"medical\"\n                                label=\"Medical\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter Employee Medical\"\n                                fullWidth\n                                margin=\"normal\"\n                                {...field}\n                                error={Boolean(errors?.medical)}\n                                helperText={errors.medical?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"education\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"education\"\n                                label=\"Education\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter Employee Education\"\n                                fullWidth\n                                margin=\"normal\"\n                                {...field}\n                                error={Boolean(errors?.education)}\n                                helperText={errors.education?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n            </Grid>\n            <Grid container spacing={6} alignItems=\"center\" justifyContent=\"center\">\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"canteen\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"canteen\"\n                                label=\"Canteen\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter Employee Canteen\"\n                                fullWidth\n                                margin=\"normal\"\n                                {...field}\n                                error={Boolean(errors?.canteen)}\n                                helperText={errors.canteen?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"incomeTax\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"incomeTax\"\n                                label=\"Income Tax\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter Income Tax\"\n                                fullWidth\n                                margin=\"normal\"\n                                {...field}\n                                error={Boolean(errors?.incomeTax)}\n                                helperText={errors.incomeTax?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\nconst BankDetails = () => {\n    const {\n        control,\n        formState: { errors }\n    } = useFormContext();\n    console.log(errors);\n    return (\n        <>\n            <Grid container spacing={6} alignItems=\"center\" justifyContent=\"center\" style={{ marginTop: '5px' }}>\n                <Grid item xs={12} sm={10}>\n                    <Controller\n                        control={control}\n                        name=\"bankName\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"bank-name\"\n                                label=\"Bank Name\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter Bank Name\"\n                                fullWidth\n                                margin=\"normal\"\n                                {...field}\n                                error={Boolean(errors?.bankName)}\n                                helperText={errors.bankName?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n            </Grid>\n            <Grid container spacing={6} alignItems=\"center\" justifyContent=\"center\">\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"bankIfsc\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"bankIfsc\"\n                                label=\"IFSC Code\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter Bank IFSC Code\"\n                                fullWidth\n                                margin=\"normal\"\n                                inputProps={{ maxLength: 11 }}\n                                {...field}\n                                error={Boolean(errors?.bankIfsc)}\n                                helperText={errors.bankIfsc?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"accountNo\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"accountNo\"\n                                label=\"Account Number\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter Account Number\"\n                                fullWidth\n                                margin=\"normal\"\n                                {...field}\n                                error={Boolean(errors?.accountNo)}\n                                helperText={errors.accountNo?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n            </Grid>\n            <Grid container spacing={6} alignItems=\"center\" justifyContent=\"center\">\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"confirmAccount\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"confirmAccount\"\n                                label=\"Confirm Account Number\"\n                                variant=\"outlined\"\n                                placeholder=\"Confirm Your Account Number\"\n                                fullWidth\n                                margin=\"normal\"\n                                {...field}\n                                error={Boolean(errors?.confirmAccount)}\n                                helperText={errors.confirmAccount?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"pfNominee\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"pfNominee\"\n                                label=\"PF Nominee\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter PF Nominee Name\"\n                                fullWidth\n                                margin=\"normal\"\n                                {...field}\n                                error={Boolean(errors?.pfNominee)}\n                                helperText={errors.pfNominee?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n            </Grid>\n            <Grid container spacing={6} alignItems=\"center\" justifyContent=\"center\">\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"gratuityNominee\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"gratuityNominee\"\n                                label=\"Gratuity Nominee\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter Gratuity Nominee Name\"\n                                fullWidth\n                                margin=\"normal\"\n                                {...field}\n                                error={Boolean(errors?.gratuityNominee)}\n                                helperText={errors.gratuityNominee?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} sm={5}>\n                    <Controller\n                        control={control}\n                        name=\"leaveNominee\"\n                        rules={{ required: 'this field is required.' }}\n                        render={({ field }) => (\n                            <TextField\n                                id=\"leave-nominee\"\n                                label=\"Leave Nominee\"\n                                variant=\"outlined\"\n                                placeholder=\"Enter Leave Nominee Name\"\n                                fullWidth\n                                margin=\"normal\"\n                                {...field}\n                                error={Boolean(errors?.leaveNominee)}\n                                helperText={errors.leaveNominee?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nfunction getStepContent(step) {\n    switch (step) {\n        case 0:\n            return <BasicDetails />;\n\n        case 1:\n            return <CompanyDetails />;\n        case 2:\n            return <SalaryDetails />;\n        case 3:\n            return <BankDetails />;\n        default:\n            return 'unknown step';\n    }\n}\n\nconst LinaerStepper = () => {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const methods = useForm({\n        defaultValues: {\n            fullName: '',\n            fatherName: '',\n            mobileNo: '',\n            gender: '',\n            date: '',\n            currentAddress: '',\n            permanentAddress: '',\n            uanNumber: '',\n            aadhaarNumber: '',\n            panNumber: '',\n            drivingLicenses: '',\n            designation: '',\n            selectWages: '',\n            sickLeave: '',\n            casualLeave: '',\n            dailyWages: '',\n            joiningDate: '',\n            basicSalary: '',\n            hra: '',\n            con: '',\n            medical: '',\n            education: '',\n            canteen: '',\n            incomeTax: '',\n            bankName: '',\n            bankIfsc: '',\n            accountNo: '',\n            confirmAccount: '',\n            pfNominee: '',\n            gratuityNominee: '',\n            leaveNominee: ''\n        }\n    });\n    const [selectFile, setselectFile] = useState(null);\n\n    const onFileChange = (event) => {\n        // Update the state\n        setselectFile(event.target.files[0]);\n    };\n\n    const onFileUpload = () => {\n        // Create an object of formData\n        const csvData = new FormData();\n        csvData.append('file', selectFile);\n        // Request made to the backend api\n        // Send formData object\n        const config = {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n                withCredentials: true\n            }\n        };\n        console.log(selectFile);\n        axios\n            .post('/api/v1/employees/csv', csvData, config)\n            .then((res) => {\n                console.log(res);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    };\n    const [activeStep, setActiveStep] = useState(0);\n    const [skippedSteps, setSkippedSteps] = useState([]);\n    const steps = getSteps();\n    const isStepOptional = (step) => step === 1 || step === 2;\n    const isStepFalied = () => {\n        Boolean(Object.keys(methods.formState.errors).length);\n    };\n    const isStepSkipped = (step) => {\n        skippedSteps.includes(step);\n    };\n    const handleNext = (data) => {\n        console.log(data);\n        if (activeStep === steps.length - 1) {\n            dispatch(addEmployee(methods.getValues()));\n            fetch('/api/v1/employees/new')\n                .then((data) => data.json())\n                .then((res) => {\n                    console.log(res);\n                    setActiveStep(activeStep + 1);\n                });\n        } else {\n            setActiveStep(activeStep + 1);\n            setSkippedSteps(skippedSteps.filter((skipItem) => skipItem !== activeStep));\n        }\n\n        if (activeStep === steps.length - 2) {\n            const x =\n                parseInt(data.basicSalary, 10) +\n                parseInt(data.hra, 10) +\n                parseInt(data.con, 10) +\n                parseInt(data.medical, 10) +\n                parseInt(data.education, 10) +\n                parseInt(data.canteen, 10) +\n                parseInt(data.incomeTax, 10);\n\n            methods.setValue('dailyWages', Math.round(x).toString());\n            console.log(methods.getValues());\n        }\n    };\n\n    const handleBack = () => {\n        setActiveStep(activeStep - 1);\n    };\n    // const onSubmit = (data) => {\n    //   console.log(data);\n    // };\n    return (\n        <div>\n            <Stepper alternativeLabel activeStep={activeStep}>\n                {steps.map((step, index) => {\n                    const labelProps = {};\n                    const stepProps = {};\n                    if (isStepFalied() && activeStep === index) {\n                        labelProps.error = true;\n                    }\n                    return (\n                        <Step {...stepProps} key={index}>\n                            <StepLabel {...labelProps}>{step}</StepLabel>\n                        </Step>\n                    );\n                })}\n            </Stepper>\n\n            {activeStep === steps.length ? (\n                <Typography variant=\"h3\" align=\"center\" style={{ marginTop: '50px' }}>\n                    Your detail submitted successfully!..\n                </Typography>\n            ) : (\n                <>\n                    <FormProvider {...methods}>\n                        <form onSubmit={methods.handleSubmit(handleNext)}>\n                            {getStepContent(activeStep)}\n\n                            {/* <Button className={classes.button} disabled={activeStep === 0} onClick={handleBack}>\n                                back\n                            </Button>\n                            <Button\n                                className={classes.button}\n                                variant=\"contained\"\n                                color=\"primary\"\n                                // onClick={handleNext}\n                                type=\"submit\"\n                            >\n                                {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                            </Button> */}\n                            <Grid container spacing={6} alignItems=\"center\" justifyContent=\"center\">\n                                <Grid item xs={12} sm={5}>\n                                    <BackButton className={classes.button} disabled={activeStep === 0} onClick={handleBack}>\n                                        Back\n                                    </BackButton>\n                                </Grid>\n                                <Grid item xs={12} sm={5}>\n                                    <ColorButton type=\"submit\" className={classes.button} variant=\"contained\">\n                                        {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                                    </ColorButton>\n                                </Grid>\n                            </Grid>\n                            <Grid container spacing={6} alignItems=\"center\" justifyContent=\"center\">\n                                <Grid item xs={12} sm={10}>\n                                    <hr style={{ marginTop: '35px', color: 'white' }} />\n                                </Grid>\n                                <Grid item xs={12} sm={7}>\n                                    <TextField\n                                        id=\"upload_file\"\n                                        name=\"uploadFile\"\n                                        type=\"file\"\n                                        fullWidth\n                                        autoComplete=\"shipping postal-code\"\n                                        variant=\"outlined\"\n                                        onChange={onFileChange}\n                                        style={{ cursor: 'pointer' }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={3}>\n                                    <UploadButton type=\"button\" onClick={onFileUpload} className={classes.button} variant=\"contained\">\n                                        Upload File\n                                    </UploadButton>\n                                </Grid>\n                            </Grid>\n                        </form>\n                    </FormProvider>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default LinaerStepper;\n","import { Container, Box } from '@mui/material';\nimport LinearStepper from './LinearStepper';\n\n// ==============================|| SAMPLE PAGE ||============================== //\n\nconst AddEmployee = () => (\n    <Container component={Box} p={2}>\n        <LinearStepper />\n    </Container>\n);\n\nexport default AddEmployee;\n"],"sourceRoot":""}